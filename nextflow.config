/*
 * Nextflow configuration file for the Population Genomics pipeline.
 *
 * This configuration defines sensible defaults for memory and CPU
 * requirements across processes, sets up the scratch directory and
 * allows customisation of input/output directories and
 * third‑party tool paths via command–line parameters.  Users can
 * override any of the values here by providing
 * `--parameter value` when invoking Nextflow.
 */

process {
    // Set default resources – many of the steps in the
    // pipeline can consume significant CPU and memory.  The values
    // below mirror the original LSF directives from the Bash
    // wrappers in the repository (e.g. s1_run_intjob.sh and
    // subsequent scripts)
    withLabel: small {
        cpus  = 2
        memory = '4 GB'
        time  = '2h'
    }
    withLabel: medium {
        cpus  = 4
        memory = '8 GB'
        time  = '6h'
    }
    withLabel: large {
        cpus  = 8
        memory = '32 GB'
        time  = '24h'
    }
    // The `publishDir` directive used in individual processes
    // determines where output files are copied; this tells
    // Nextflow not to clean up the work directory when a job
    // completes.
    publishDir = [
        [target: { params.outdir ?: 'results' }, mode: 'copy']
    ]
}

params {
    /*
     * Directory containing compressed VCFs (e.g. `.vcf.gz`).  Each file
     * will be processed independently in the first stage of the
     * pipeline.  Set this via `--input_dir path/to/vcf_folder` on the
     * command line.
     */
    input_dir = 'input'

    /*
     * Output directory where all intermediate and final results will be
     * published.  Defaults to `results`.  Override on the command
     * line with `--outdir path/to/output` if desired.
     */
    outdir = 'nextflow_results'

    /*
     * Root location of ANNOVAR installation.  The pipeline
     * references the `table_annovar.pl` script from here.  You
     * should provide this directory via the command line using
     * `--annovar_home`.
     */
    annovar_home = '/path/to/annovar'

    /*
     * Directory containing the ANNOVAR database (humandb).  This
     * should match the genome build you intend to use (e.g. hg19 or
     * hg38).  Set it with `--annovar_db`.
     */
    annovar_db = '/path/to/annovar/humandb'

    /*
     * Path to the InterVar Python script.  InterVar is used to
     * interpret variant pathogenicity.  Provide its location via
     * `--intervar_script`.
     */
    intervar_script = '/path/to/intervar/Intervar.py'

    /*
     * Location of the downstream scripts included in the Huang‑lab
     * repository.  These include the R and Python scripts that
     * perform merging, extraction, filtering and summarisation.
     * When running the pipeline outside of the original repo you
     * should set this to the cloned `PopulationGenomics/scripts`
     * directory via `--scripts_dir`.
     */
    scripts_dir = '/path/to/PopulationGenomics/scripts'

    /*
     * Default genome build used by ANNOVAR and InterVar.  The
     * original pipeline assumes hg19; update to hg38 if your VCFs
     * are in GRCh38 coordinates.
     */
    genome_build = 'hg19'

    /*
     * Maximum allele frequency (AF) threshold used to retain rare
     * sites in the VCF during the allele frequency filtering step
     * (s5).  This mirrors the `--max-af 0.0005` parameter used in
     * the original Bash script.  Adjust
     * as necessary for your cohort.
     */
    max_af = 0.0005

    /*
     * Gene annotation table used by the summary script (s8).  This
     * should be a tabular file mapping gene symbols to cancer
     * categories and other metadata.  Override with
     * `--gene_info path/to/gene_info.tsv`.
     */
    gene_info = '/path/to/gene_info.tsv'

    /*
     * Panel of genes of interest.  In the Huang‑lab pipeline this
     * corresponds to the ACMG32 cancer predisposition gene list.  It
     * is used by s3 and s8.  Provide via `--gene_panel`.
     */
    gene_panel = '/path/to/ACMG32_gene_list.csv'

    /*
     * Patient meta‑data table containing information such as sample
     * identifiers, demographics and ancestry.  This is required for
     * the summary (s8) and carrier frequency (s9) steps.  Set via
     * `--patient_info`.
     */
    patient_info = '/path/to/patient_info.tsv'

    /*
     * BED file specifying the coding regions of the exome.  Used by
     * s8_Generate_summary_df.py to annotate variants with gene
     * coordinates.  Provide via `--region_bed`.
     */
    region_bed = '/path/to/coding_regions.bed'
}
